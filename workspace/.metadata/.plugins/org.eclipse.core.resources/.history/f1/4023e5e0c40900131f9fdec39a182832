package ViewGame;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;

public class WorldRender {
	WorldHandler worldhandler;
	
	//camera
	OrthographicCamera camera;
	  SpriteBatch spriteBatch;      
	
	// map rendering
	private TiledMap map;
	private OrthogonalTiledMapRenderer render;
	public static final float unitScale = 1/16f;
	float w = Gdx.graphics.getWidth();
	float h = Gdx.graphics.getHeight();
	private static int WIDTH;
	private static int HEIGHT;
	
	
	// pacman rendering / animation
	 private static final int PacManFRAME_COLS = 4;         
     private static final int PacManFRAME_ROWS = 1; 
     private static final int PinkyFRAME_COLS = 2;         
     private static final int PinkyFRAME_ROWS = 1;  
     Animation PacmanWalkAnimation;  
     Animation PinkyWalkAnimation;
     Texture walkSheet;             
     TextureRegion[] walkFrames;                   
     TextureRegion currentFrame;           
     float stateTime;
     // object layer value
  
   
     
     ShapeRenderer sr;
	
	public WorldRender(WorldHandler world) {
		// TODO Auto-generated constructor stub
		this.worldhandler = world;
		
		camera = new OrthographicCamera();
		
		
		
	
		// map rendering
		
		map = worldhandler.getMap();
		render = new OrthogonalTiledMapRenderer(map,unitScale);
		
	
		
		// pacman stuff
		   walkSheet = new Texture(Gdx.files.internal("data/maps/PacManAnim.png"));  
		   
           TextureRegion[][] tmp = TextureRegion.split(walkSheet, walkSheet.getWidth() / PacManFRAME_COLS, walkSheet.getHeight() / PacManFRAME_ROWS);                               
           walkFrames = new TextureRegion[PacManFRAME_COLS * PacManFRAME_ROWS];
           int index = 0;
           for (int i = 0; i < FRAME_ROWS; i++) {
                   for (int j = 0; j < FRAME_COLS; j++) {
                           walkFrames[index++] = tmp[i][j];
                   }
           }
           PacmanWalkAnimation = new Animation(0.25f, walkFrames);              
           spriteBatch = new SpriteBatch();                                
           stateTime = 0f;  
         
         // pinky stuff
           walkSheet = new Texture(Gdx.files.internal("data/maps/PinkyAnim.png"));  
		   
           tmp = TextureRegion.split(walkSheet, walkSheet.getWidth() / FRAME_COLS, walkSheet.getHeight() / FRAME_ROWS);                               
           walkFrames = new TextureRegion[FRAME_COLS * FRAME_ROWS];
           int index = 0;
           for (int i = 0; i < FRAME_ROWS; i++) {
                   for (int j = 0; j < FRAME_COLS; j++) {
                           walkFrames[index++] = tmp[i][j];
                   }
           }
           PacmanWalkAnimation = new Animation(0.25f, walkFrames);              
           spriteBatch = new SpriteBatch();                                
           stateTime = 0f;  
		
        // camera stuff
   		WIDTH = ((TiledMapTileLayer) map.getLayers().get(0)).getWidth();
   		HEIGHT = ((TiledMapTileLayer) map.getLayers().get(0)).getHeight();
   		camera.setToOrtho(false, WIDTH, HEIGHT);
   		camera.position.x = WIDTH / 2;
   		camera.position.y = HEIGHT / 2+0.5f;
   		
   		camera.update();
          
	}


	public void render() {
		// TODO Auto-generated method stub
		Gdx.gl.glClearColor(0, 0, 0, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		
		// map rendering
		render.setView(camera);
		render.render();
		
		
		
		// pacman render
		 stateTime += Gdx.graphics.getDeltaTime();                      
         currentFrame = PacmanWalkAnimation.getKeyFrame(stateTime, true);      
        
      spriteBatch.setProjectionMatrix(camera.combined);
       spriteBatch.begin();     
         spriteBatch.draw(currentFrame, worldhandler.getPacMan().getPosition().x, worldhandler.getPacMan().getPosition().y,1, 1);
         
         spriteBatch.end();
	
      
        }


	public static void resize(int width, int height) {
		// TODO Auto-generated method stub
		
	}


	public OrthographicCamera getCamera() {
		// TODO Auto-generated method stub
		return camera;
	}


	

}
